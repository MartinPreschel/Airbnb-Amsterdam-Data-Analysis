{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "300b610f-6c72-485c-a1b4-69c637adddfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import scipy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9d5651dd-c666-4a20-a4b1-be9080aecb2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# data set path\n",
    "\n",
    "path = r\"/Users/martin/anaconda_projects/11-02-2025 Instacart Basket Analysis\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "37e0de22-64c5-4c7e-821c-a6ef02a3dd90",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import amsterdam_listings.csv\n",
    "\n",
    "df = pd.read_csv(os.path.join(path, '02 data' , 'Original Data' , 'amsterdam_listings.csv'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1def051-b711-4f35-a513-c4821bfd9507",
   "metadata": {},
   "source": [
    "# Task 5) Data Cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57e259c1-1c67-4ed9-938f-79384ab6cf96",
   "metadata": {},
   "source": [
    "## 1. Shape & Overview"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1fb1c892-f509-4519-8f68-8ec7d16f97b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10075, 79)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape       # Rows and columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "42d06626-445d-485d-ba55-3dda48799ba7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'listing_url', 'scrape_id', 'last_scraped', 'source', 'name',\n",
       "       'description', 'neighborhood_overview', 'picture_url', 'host_id',\n",
       "       'host_url', 'host_name', 'host_since', 'host_location', 'host_about',\n",
       "       'host_response_time', 'host_response_rate', 'host_acceptance_rate',\n",
       "       'host_is_superhost', 'host_thumbnail_url', 'host_picture_url',\n",
       "       'host_neighbourhood', 'host_listings_count',\n",
       "       'host_total_listings_count', 'host_verifications',\n",
       "       'host_has_profile_pic', 'host_identity_verified', 'neighbourhood',\n",
       "       'neighbourhood_cleansed', 'neighbourhood_group_cleansed', 'latitude',\n",
       "       'longitude', 'property_type', 'room_type', 'accommodates', 'bathrooms',\n",
       "       'bathrooms_text', 'bedrooms', 'beds', 'amenities', 'price',\n",
       "       'minimum_nights', 'maximum_nights', 'minimum_minimum_nights',\n",
       "       'maximum_minimum_nights', 'minimum_maximum_nights',\n",
       "       'maximum_maximum_nights', 'minimum_nights_avg_ntm',\n",
       "       'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability',\n",
       "       'availability_30', 'availability_60', 'availability_90',\n",
       "       'availability_365', 'calendar_last_scraped', 'number_of_reviews',\n",
       "       'number_of_reviews_ltm', 'number_of_reviews_l30d', 'availability_eoy',\n",
       "       'number_of_reviews_ly', 'estimated_occupancy_l365d',\n",
       "       'estimated_revenue_l365d', 'first_review', 'last_review',\n",
       "       'review_scores_rating', 'review_scores_accuracy',\n",
       "       'review_scores_cleanliness', 'review_scores_checkin',\n",
       "       'review_scores_communication', 'review_scores_location',\n",
       "       'review_scores_value', 'license', 'instant_bookable',\n",
       "       'calculated_host_listings_count',\n",
       "       'calculated_host_listings_count_entire_homes',\n",
       "       'calculated_host_listings_count_private_rooms',\n",
       "       'calculated_host_listings_count_shared_rooms', 'reviews_per_month'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns     # Column names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6d61ae75-d2bc-4897-aa85-0c937eb4a946",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10075 entries, 0 to 10074\n",
      "Data columns (total 79 columns):\n",
      " #   Column                                        Non-Null Count  Dtype  \n",
      "---  ------                                        --------------  -----  \n",
      " 0   id                                            10075 non-null  int64  \n",
      " 1   listing_url                                   10075 non-null  object \n",
      " 2   scrape_id                                     10075 non-null  int64  \n",
      " 3   last_scraped                                  10075 non-null  object \n",
      " 4   source                                        10075 non-null  object \n",
      " 5   name                                          10075 non-null  object \n",
      " 6   description                                   9729 non-null   object \n",
      " 7   neighborhood_overview                         5332 non-null   object \n",
      " 8   picture_url                                   10075 non-null  object \n",
      " 9   host_id                                       10075 non-null  int64  \n",
      " 10  host_url                                      10075 non-null  object \n",
      " 11  host_name                                     10058 non-null  object \n",
      " 12  host_since                                    10058 non-null  object \n",
      " 13  host_location                                 8933 non-null   object \n",
      " 14  host_about                                    5315 non-null   object \n",
      " 15  host_response_time                            6192 non-null   object \n",
      " 16  host_response_rate                            6192 non-null   object \n",
      " 17  host_acceptance_rate                          7989 non-null   object \n",
      " 18  host_is_superhost                             9949 non-null   object \n",
      " 19  host_thumbnail_url                            10058 non-null  object \n",
      " 20  host_picture_url                              10058 non-null  object \n",
      " 21  host_neighbourhood                            2868 non-null   object \n",
      " 22  host_listings_count                           10058 non-null  float64\n",
      " 23  host_total_listings_count                     10058 non-null  float64\n",
      " 24  host_verifications                            10058 non-null  object \n",
      " 25  host_has_profile_pic                          10058 non-null  object \n",
      " 26  host_identity_verified                        10058 non-null  object \n",
      " 27  neighbourhood                                 5332 non-null   object \n",
      " 28  neighbourhood_cleansed                        10075 non-null  object \n",
      " 29  neighbourhood_group_cleansed                  0 non-null      float64\n",
      " 30  latitude                                      10075 non-null  float64\n",
      " 31  longitude                                     10075 non-null  float64\n",
      " 32  property_type                                 10075 non-null  object \n",
      " 33  room_type                                     10075 non-null  object \n",
      " 34  accommodates                                  10075 non-null  int64  \n",
      " 35  bathrooms                                     5960 non-null   float64\n",
      " 36  bathrooms_text                                10067 non-null  object \n",
      " 37  bedrooms                                      9783 non-null   float64\n",
      " 38  beds                                          5925 non-null   float64\n",
      " 39  amenities                                     10075 non-null  object \n",
      " 40  price                                         5911 non-null   object \n",
      " 41  minimum_nights                                10075 non-null  int64  \n",
      " 42  maximum_nights                                10075 non-null  int64  \n",
      " 43  minimum_minimum_nights                        10066 non-null  float64\n",
      " 44  maximum_minimum_nights                        10066 non-null  float64\n",
      " 45  minimum_maximum_nights                        10066 non-null  float64\n",
      " 46  maximum_maximum_nights                        10066 non-null  float64\n",
      " 47  minimum_nights_avg_ntm                        10066 non-null  float64\n",
      " 48  maximum_nights_avg_ntm                        10066 non-null  float64\n",
      " 49  calendar_updated                              0 non-null      float64\n",
      " 50  has_availability                              9720 non-null   object \n",
      " 51  availability_30                               10075 non-null  int64  \n",
      " 52  availability_60                               10075 non-null  int64  \n",
      " 53  availability_90                               10075 non-null  int64  \n",
      " 54  availability_365                              10075 non-null  int64  \n",
      " 55  calendar_last_scraped                         10075 non-null  object \n",
      " 56  number_of_reviews                             10075 non-null  int64  \n",
      " 57  number_of_reviews_ltm                         10075 non-null  int64  \n",
      " 58  number_of_reviews_l30d                        10075 non-null  int64  \n",
      " 59  availability_eoy                              10075 non-null  int64  \n",
      " 60  number_of_reviews_ly                          10075 non-null  int64  \n",
      " 61  estimated_occupancy_l365d                     10075 non-null  int64  \n",
      " 62  estimated_revenue_l365d                       5911 non-null   float64\n",
      " 63  first_review                                  8944 non-null   object \n",
      " 64  last_review                                   8944 non-null   object \n",
      " 65  review_scores_rating                          8944 non-null   float64\n",
      " 66  review_scores_accuracy                        8944 non-null   float64\n",
      " 67  review_scores_cleanliness                     8943 non-null   float64\n",
      " 68  review_scores_checkin                         8944 non-null   float64\n",
      " 69  review_scores_communication                   8944 non-null   float64\n",
      " 70  review_scores_location                        8944 non-null   float64\n",
      " 71  review_scores_value                           8944 non-null   float64\n",
      " 72  license                                       9948 non-null   object \n",
      " 73  instant_bookable                              10075 non-null  object \n",
      " 74  calculated_host_listings_count                10075 non-null  int64  \n",
      " 75  calculated_host_listings_count_entire_homes   10075 non-null  int64  \n",
      " 76  calculated_host_listings_count_private_rooms  10075 non-null  int64  \n",
      " 77  calculated_host_listings_count_shared_rooms   10075 non-null  int64  \n",
      " 78  reviews_per_month                             8944 non-null   float64\n",
      "dtypes: float64(24), int64(20), object(35)\n",
      "memory usage: 6.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()      # Data types and non-null counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8e820b30-6701-49a9-aefc-271a60ae95a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>listing_url</th>\n",
       "      <th>scrape_id</th>\n",
       "      <th>last_scraped</th>\n",
       "      <th>source</th>\n",
       "      <th>name</th>\n",
       "      <th>description</th>\n",
       "      <th>neighborhood_overview</th>\n",
       "      <th>picture_url</th>\n",
       "      <th>host_id</th>\n",
       "      <th>...</th>\n",
       "      <th>review_scores_communication</th>\n",
       "      <th>review_scores_location</th>\n",
       "      <th>review_scores_value</th>\n",
       "      <th>license</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>calculated_host_listings_count_entire_homes</th>\n",
       "      <th>calculated_host_listings_count_private_rooms</th>\n",
       "      <th>calculated_host_listings_count_shared_rooms</th>\n",
       "      <th>reviews_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2818</td>\n",
       "      <td>https://www.airbnb.com/rooms/2818</td>\n",
       "      <td>20250302144653</td>\n",
       "      <td>2025-03-03</td>\n",
       "      <td>city scrape</td>\n",
       "      <td>Quiet Garden View Room &amp; Super Fast Wi-Fi</td>\n",
       "      <td>Quiet Garden View Room &amp; Super Fast Wi-Fi</td>\n",
       "      <td>Indische Buurt (\"Indies Neighborhood\") is a ne...</td>\n",
       "      <td>https://a0.muscache.com/pictures/10272854/8dcc...</td>\n",
       "      <td>3159</td>\n",
       "      <td>...</td>\n",
       "      <td>4.98</td>\n",
       "      <td>4.73</td>\n",
       "      <td>4.80</td>\n",
       "      <td>0363 5F3A 5684 6750 D14D</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>27886</td>\n",
       "      <td>https://www.airbnb.com/rooms/27886</td>\n",
       "      <td>20250302144653</td>\n",
       "      <td>2025-03-03</td>\n",
       "      <td>previous scrape</td>\n",
       "      <td>Romantic, stylish B&amp;B houseboat in canal district</td>\n",
       "      <td>Stylish and romantic houseboat on fantastic hi...</td>\n",
       "      <td>Central, quiet, safe, clean and beautiful.</td>\n",
       "      <td>https://a0.muscache.com/pictures/02c2da9d-660e...</td>\n",
       "      <td>97647</td>\n",
       "      <td>...</td>\n",
       "      <td>4.92</td>\n",
       "      <td>4.89</td>\n",
       "      <td>4.77</td>\n",
       "      <td>0363 974D 4986 7411 88D8</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28871</td>\n",
       "      <td>https://www.airbnb.com/rooms/28871</td>\n",
       "      <td>20250302144653</td>\n",
       "      <td>2025-03-03</td>\n",
       "      <td>city scrape</td>\n",
       "      <td>Comfortable double room</td>\n",
       "      <td>Basic bedroom in the center of Amsterdam.</td>\n",
       "      <td>Flower market , Leidseplein , Rembrantsplein</td>\n",
       "      <td>https://a0.muscache.com/pictures/160889/362340...</td>\n",
       "      <td>124245</td>\n",
       "      <td>...</td>\n",
       "      <td>4.94</td>\n",
       "      <td>4.94</td>\n",
       "      <td>4.83</td>\n",
       "      <td>0363 607B EA74 0BD8 2F6F</td>\n",
       "      <td>f</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>29051</td>\n",
       "      <td>https://www.airbnb.com/rooms/29051</td>\n",
       "      <td>20250302144653</td>\n",
       "      <td>2025-03-03</td>\n",
       "      <td>city scrape</td>\n",
       "      <td>Comfortable single room</td>\n",
       "      <td>This room can also be rented as a single or a ...</td>\n",
       "      <td>the street is quite lively especially on weeke...</td>\n",
       "      <td>https://a0.muscache.com/pictures/162009/bd6be2...</td>\n",
       "      <td>124245</td>\n",
       "      <td>...</td>\n",
       "      <td>4.92</td>\n",
       "      <td>4.87</td>\n",
       "      <td>4.79</td>\n",
       "      <td>0363 607B EA74 0BD8 2F6F</td>\n",
       "      <td>f</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>44391</td>\n",
       "      <td>https://www.airbnb.com/rooms/44391</td>\n",
       "      <td>20250302144653</td>\n",
       "      <td>2025-03-03</td>\n",
       "      <td>previous scrape</td>\n",
       "      <td>Quiet 2-bedroom Amsterdam city centre apartment</td>\n",
       "      <td>Guests greatly appreciate the unique location ...</td>\n",
       "      <td>The appartment is located in the city centre. ...</td>\n",
       "      <td>https://a0.muscache.com/pictures/97741545/3900...</td>\n",
       "      <td>194779</td>\n",
       "      <td>...</td>\n",
       "      <td>4.90</td>\n",
       "      <td>4.68</td>\n",
       "      <td>4.50</td>\n",
       "      <td>0363 E76E F06A C1DD 172C</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 79 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      id                         listing_url       scrape_id last_scraped  \\\n",
       "0   2818   https://www.airbnb.com/rooms/2818  20250302144653   2025-03-03   \n",
       "1  27886  https://www.airbnb.com/rooms/27886  20250302144653   2025-03-03   \n",
       "2  28871  https://www.airbnb.com/rooms/28871  20250302144653   2025-03-03   \n",
       "3  29051  https://www.airbnb.com/rooms/29051  20250302144653   2025-03-03   \n",
       "4  44391  https://www.airbnb.com/rooms/44391  20250302144653   2025-03-03   \n",
       "\n",
       "            source                                               name  \\\n",
       "0      city scrape          Quiet Garden View Room & Super Fast Wi-Fi   \n",
       "1  previous scrape  Romantic, stylish B&B houseboat in canal district   \n",
       "2      city scrape                            Comfortable double room   \n",
       "3      city scrape                            Comfortable single room   \n",
       "4  previous scrape    Quiet 2-bedroom Amsterdam city centre apartment   \n",
       "\n",
       "                                         description  \\\n",
       "0          Quiet Garden View Room & Super Fast Wi-Fi   \n",
       "1  Stylish and romantic houseboat on fantastic hi...   \n",
       "2          Basic bedroom in the center of Amsterdam.   \n",
       "3  This room can also be rented as a single or a ...   \n",
       "4  Guests greatly appreciate the unique location ...   \n",
       "\n",
       "                               neighborhood_overview  \\\n",
       "0  Indische Buurt (\"Indies Neighborhood\") is a ne...   \n",
       "1         Central, quiet, safe, clean and beautiful.   \n",
       "2       Flower market , Leidseplein , Rembrantsplein   \n",
       "3  the street is quite lively especially on weeke...   \n",
       "4  The appartment is located in the city centre. ...   \n",
       "\n",
       "                                         picture_url  host_id  ...  \\\n",
       "0  https://a0.muscache.com/pictures/10272854/8dcc...     3159  ...   \n",
       "1  https://a0.muscache.com/pictures/02c2da9d-660e...    97647  ...   \n",
       "2  https://a0.muscache.com/pictures/160889/362340...   124245  ...   \n",
       "3  https://a0.muscache.com/pictures/162009/bd6be2...   124245  ...   \n",
       "4  https://a0.muscache.com/pictures/97741545/3900...   194779  ...   \n",
       "\n",
       "  review_scores_communication review_scores_location review_scores_value  \\\n",
       "0                        4.98                   4.73                4.80   \n",
       "1                        4.92                   4.89                4.77   \n",
       "2                        4.94                   4.94                4.83   \n",
       "3                        4.92                   4.87                4.79   \n",
       "4                        4.90                   4.68                4.50   \n",
       "\n",
       "                    license instant_bookable calculated_host_listings_count  \\\n",
       "0  0363 5F3A 5684 6750 D14D                f                              1   \n",
       "1  0363 974D 4986 7411 88D8                f                              1   \n",
       "2  0363 607B EA74 0BD8 2F6F                f                              2   \n",
       "3  0363 607B EA74 0BD8 2F6F                f                              2   \n",
       "4  0363 E76E F06A C1DD 172C                f                              1   \n",
       "\n",
       "  calculated_host_listings_count_entire_homes  \\\n",
       "0                                           0   \n",
       "1                                           0   \n",
       "2                                           0   \n",
       "3                                           0   \n",
       "4                                           1   \n",
       "\n",
       "  calculated_host_listings_count_private_rooms  \\\n",
       "0                                            1   \n",
       "1                                            1   \n",
       "2                                            2   \n",
       "3                                            2   \n",
       "4                                            0   \n",
       "\n",
       "  calculated_host_listings_count_shared_rooms reviews_per_month  \n",
       "0                                           0              2.05  \n",
       "1                                           0              1.84  \n",
       "2                                           0              3.83  \n",
       "3                                           0              4.67  \n",
       "4                                           0              0.24  \n",
       "\n",
       "[5 rows x 79 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()      # First rows"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2d0508c-25c7-45a8-b6c0-755869cee49f",
   "metadata": {},
   "source": [
    "## 2. Find Missing Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e2831c77-1c12-4ca8-bfae-0ba25f95f684",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "calendar_updated                10075\n",
       "neighbourhood_group_cleansed    10075\n",
       "host_neighbourhood               7207\n",
       "host_about                       4760\n",
       "neighbourhood                    4743\n",
       "                                ...  \n",
       "maximum_nights                      0\n",
       "availability_30                     0\n",
       "availability_60                     0\n",
       "availability_90                     0\n",
       "amenities                           0\n",
       "Length: 79, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "280cbfbb-7044-4885-bd9f-da0d4fb211f1",
   "metadata": {},
   "source": [
    "### Several columns contain missing values. The most significant are:\n",
    "- `calendar_updated` (10,075 missing): This field is often left blank when hosts do not manually update their calendars.\n",
    "- `neighbourhood_group_cleansed` and `neighbourhood` (10,075 and 4,743 missing): These are important for geographic analysis. If necessary, I will use `latitude` and `longitude` as an alternative.\n",
    "- `host_neighbourhood` and `host_about`: These are optional fields that do not impact the main analysis.\n",
    "\n",
    "No missing values were found in key fields such as `price`, `room_type`, `availability_*`, or `amenities`.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a130422a-192e-4790-a1ab-0f7bf8f83aab",
   "metadata": {},
   "source": [
    "## 3. Check Duplicates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "27cca5d6-9366-4f5b-941e-677f3a742f6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f63aa670-73de-4764-96e9-eae8d48a3661",
   "metadata": {},
   "source": [
    "### No duplicate rows were found in the dataset (`df.duplicated().sum()` returned 0), which confirms that all listings are unique."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95e1f635-0083-4269-b2cb-b62aaefdd09f",
   "metadata": {},
   "source": [
    "## 4. Check Data Types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "62eef1cb-36c6-4a39-a9ac-44bfe0d6b34b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                                                int64\n",
       "listing_url                                      object\n",
       "scrape_id                                         int64\n",
       "last_scraped                                     object\n",
       "source                                           object\n",
       "                                                 ...   \n",
       "calculated_host_listings_count                    int64\n",
       "calculated_host_listings_count_entire_homes       int64\n",
       "calculated_host_listings_count_private_rooms      int64\n",
       "calculated_host_listings_count_shared_rooms       int64\n",
       "reviews_per_month                               float64\n",
       "Length: 79, dtype: object"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b1d0b81-3c9e-4f0d-84d5-125d9aed4c74",
   "metadata": {},
   "source": [
    "### Step 1: Fix Any Data Types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "289b5744-af95-4f17-bbb3-3efad9de312b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert last_scraped and other date columns:\n",
    "\n",
    "df['last_scraped'] = pd.to_datetime(df['last_scraped'], errors='coerce')\n",
    "df['calendar_last_scraped'] = pd.to_datetime(df['calendar_last_scraped'], errors='coerce')\n",
    "df['first_review'] = pd.to_datetime(df['first_review'], errors='coerce')\n",
    "df['last_review'] = pd.to_datetime(df['last_review'], errors='coerce')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6bb3ff25-64d5-4496-9017-7e1408e84d8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    $66.00\n",
       "1       NaN\n",
       "2    $75.00\n",
       "3    $59.00\n",
       "4       NaN\n",
       "Name: price, dtype: object"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert price (if it exists and is stored as object):\n",
    "\n",
    "df['price'].head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "35856e89-2787-4f7c-b118-ddb24408d399",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove $ and commas, convert to float (numeric)\n",
    "df['price'] = df['price'].replace(r'[\\$,]', '', regex=True)\n",
    "\n",
    "# Now convert to numeric and handle any errors\n",
    "df['price'] = pd.to_numeric(df['price'], errors='coerce')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e1ebc20-f3a4-46ec-91b3-2a79c26ba775",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('float64')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check Result\n",
    "df['price'].head()\n",
    "df['price'].dtype\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "58900997-e35f-491e-b7a4-0afc31e39d78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['listing_url', 'source', 'name', 'description', 'neighborhood_overview',\n",
       "       'picture_url', 'host_url', 'host_name', 'host_since', 'host_location',\n",
       "       'host_about', 'host_response_time', 'host_response_rate',\n",
       "       'host_acceptance_rate', 'host_is_superhost', 'host_thumbnail_url',\n",
       "       'host_picture_url', 'host_neighbourhood', 'host_verifications',\n",
       "       'host_has_profile_pic', 'host_identity_verified', 'neighbourhood',\n",
       "       'neighbourhood_cleansed', 'property_type', 'room_type',\n",
       "       'bathrooms_text', 'amenities', 'has_availability', 'license',\n",
       "       'instant_bookable'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show all columns currently stored as object\n",
    "df.select_dtypes(include='object').columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "246140e6-f99e-4ee3-af92-b350a410c8c6",
   "metadata": {},
   "source": [
    "## 5. Recognize Outliers (e.g. with price)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "53a18e75-a2a1-4942-ba42-930a041999e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the distribution of prices using a boxplot to identify potential outliers.\n",
    "# This chart helps spot listings with extremely high prices that may affect the overall analysis.\n",
    "df['price'].plot.box()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f40157b5-de4d-4069-a0f0-c8b37272452d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     5911.000000\n",
       "mean       265.115716\n",
       "std        422.193489\n",
       "min         10.000000\n",
       "25%        145.000000\n",
       "50%        209.000000\n",
       "75%        300.000000\n",
       "max      14404.000000\n",
       "Name: price, dtype: float64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display descriptive statistics for the 'price' column to better understand the overall distribution.\n",
    "# Includes key metrics like mean, median, standard deviation, min, and max.\n",
    "df['price'].describe()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be45c149-ed65-4dcb-92a6-d73ca7805941",
   "metadata": {},
   "source": [
    "#  Task 6) Understanding the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a82086b5-ecc8-46e1-99c8-a5e25883bd27",
   "metadata": {},
   "source": [
    "### Outlier Analysis: `price`\n",
    "\n",
    "To explore potential outliers, I plotted a boxplot of the `price` column.  \n",
    "The chart shows that most listings fall within a typical price range, but there are several significant outliers.\n",
    "\n",
    "Most prices are below €500, while some extreme values go beyond €10,000. These are likely rare or luxury listings and may skew the distribution.\n",
    "\n",
    "At this stage, I decided to keep the outliers in the dataset, but I may consider filtering them in specific analyses later, depending on the context.\n",
    "\n",
    "According to the descriptive statistics of the `price` column, 75% of listings cost less than €300, while the maximum price is €14,404.  \n",
    "This confirms the presence of extreme outliers. The average price is €265, which is notably higher than the median (€209), indicating a right-skewed distribution.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73295ed5-c396-4150-bef5-a08018545e2c",
   "metadata": {},
   "source": [
    "## 6. List of all numeric variables"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95244224-b14a-4a13-8071-8ef46ecf3c20",
   "metadata": {},
   "source": [
    "## Step 1: List of all numeric variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "99710449-0cfd-4f7c-97dd-3c1aaa585c26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['id',\n",
       " 'scrape_id',\n",
       " 'host_id',\n",
       " 'host_listings_count',\n",
       " 'host_total_listings_count',\n",
       " 'neighbourhood_group_cleansed',\n",
       " 'latitude',\n",
       " 'longitude',\n",
       " 'accommodates',\n",
       " 'bathrooms',\n",
       " 'bedrooms',\n",
       " 'beds',\n",
       " 'price',\n",
       " 'minimum_nights',\n",
       " 'maximum_nights',\n",
       " 'minimum_minimum_nights',\n",
       " 'maximum_minimum_nights',\n",
       " 'minimum_maximum_nights',\n",
       " 'maximum_maximum_nights',\n",
       " 'minimum_nights_avg_ntm',\n",
       " 'maximum_nights_avg_ntm',\n",
       " 'calendar_updated',\n",
       " 'availability_30',\n",
       " 'availability_60',\n",
       " 'availability_90',\n",
       " 'availability_365',\n",
       " 'number_of_reviews',\n",
       " 'number_of_reviews_ltm',\n",
       " 'number_of_reviews_l30d',\n",
       " 'availability_eoy',\n",
       " 'number_of_reviews_ly',\n",
       " 'estimated_occupancy_l365d',\n",
       " 'estimated_revenue_l365d',\n",
       " 'review_scores_rating',\n",
       " 'review_scores_accuracy',\n",
       " 'review_scores_cleanliness',\n",
       " 'review_scores_checkin',\n",
       " 'review_scores_communication',\n",
       " 'review_scores_location',\n",
       " 'review_scores_value',\n",
       " 'calculated_host_listings_count',\n",
       " 'calculated_host_listings_count_entire_homes',\n",
       " 'calculated_host_listings_count_private_rooms',\n",
       " 'calculated_host_listings_count_shared_rooms',\n",
       " 'reviews_per_month']"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This shows all columns that contain numbers - e.g. price, minimum_nights, availability_365 etc\n",
    "df.select_dtypes(include=['int64', 'float64']).columns.tolist()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39f85b6a-edfa-4fda-9681-a337a43f3448",
   "metadata": {},
   "source": [
    "## Step 2: List of all categorical variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3e54847b-363e-4a88-8129-a211e3643ba2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['listing_url',\n",
       " 'source',\n",
       " 'name',\n",
       " 'description',\n",
       " 'neighborhood_overview',\n",
       " 'picture_url',\n",
       " 'host_url',\n",
       " 'host_name',\n",
       " 'host_since',\n",
       " 'host_location',\n",
       " 'host_about',\n",
       " 'host_response_time',\n",
       " 'host_response_rate',\n",
       " 'host_acceptance_rate',\n",
       " 'host_is_superhost',\n",
       " 'host_thumbnail_url',\n",
       " 'host_picture_url',\n",
       " 'host_neighbourhood',\n",
       " 'host_verifications',\n",
       " 'host_has_profile_pic',\n",
       " 'host_identity_verified',\n",
       " 'neighbourhood',\n",
       " 'neighbourhood_cleansed',\n",
       " 'property_type',\n",
       " 'room_type',\n",
       " 'bathrooms_text',\n",
       " 'amenities',\n",
       " 'has_availability',\n",
       " 'license',\n",
       " 'instant_bookable']"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This shows all columns that contain objects - e.g. name, description etc\n",
    "df.select_dtypes(include='object').columns.tolist()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f18dc33-ff95-43b8-8f16-2df13770f8ab",
   "metadata": {},
   "source": [
    "### Variables Overview\n",
    "\n",
    "**Continuous Variables**\n",
    "- `price`: Price per night\n",
    "- `minimum_nights`: Minimum stay requirement per listing\n",
    "- `reviews_per_month`: Average number of reviews received per month\n",
    "\n",
    "**Categorical Variables**\n",
    "- `room_type`: The type of accommodation (e.g., Private Room, Entire Home)\n",
    "- `neighbourhood`: The area or district where the listing is located\n",
    "- `host_is_superhost`: Whether the host is classified as a superhost\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c2e3793-57d4-4c7b-bbbe-dfdaf92395b6",
   "metadata": {},
   "source": [
    "# Task 7) Consider limitations and ethics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b213127-43c9-49af-a94a-7262103de491",
   "metadata": {},
   "source": [
    "### Limitations and Ethical Considerations\n",
    "\n",
    "- **Data Age**: The dataset was last updated on 2 March 2025, making it highly relevant and up-to-date for current market insights.\n",
    "- **Missing Data**: Several columns (e.g., `host_about`, `calendar_updated`) contain a significant number of missing values and were not included in the main analysis.\n",
    "- **Bias**: The dataset only includes listings from Amsterdam. This restricts the findings to a specific geographic context and may not be generalizable to other cities or regions.\n",
    "- **Source and Licensing**: The data is sourced from Inside Airbnb, a reputable open-data platform. It is publicly available and can be used for non-commercial, educational purposes.\n",
    "- **Privacy**: No personally identifiable information is included. All host and listing data is appropriately anonymized to ensure user privacy.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "fa2b7c2d-52c4-4e1f-a282-a827d16be659",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Export data to csv\n",
    "\n",
    "df.to_csv(os.path.join(path, '02 Data','Prepared Data', 'amsterdam_listings_cleaned.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9ca4168-be3d-4952-9667-a46c5102926c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
